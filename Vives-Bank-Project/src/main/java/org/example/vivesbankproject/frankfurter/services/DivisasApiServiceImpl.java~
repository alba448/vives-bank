package org.example.vivesbankproject.frankfurter.services;

import org.example.vivesbankproject.frankfurter.model.FrankFurterResponse;
import org.springframework.stereotype.Service;
import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;

import java.io.IOException;
import java.util.HashMap;

@Service
public class DivisasApiServiceImpl  {

    private final DivisasApiService divisasApiService;

    public DivisasApiServiceImpl(DivisasApiService divisasApiService) {
        this.divisasApiService = divisasApiService;
    }

    public void getLatestRates(String baseCurrency, String targetCurrencies, int amount, Callback<FrankFurterResponse> callback) throws IOException {
        Call<FrankFurterResponse> call = divisasApiService.getLatestRates(baseCurrency, targetCurrencies);

        call.enqueue(new Callback<FrankFurterResponse>() {
            @Override
            public void onResponse(Call<FrankFurterResponse> call, Response<FrankFurterResponse> response) {
                if (response.isSuccessful()) {
                    var exchangeRates = response.body().getExchangeRates();
                    var convertedAmounts = new HashMap<String, Double>();

                    exchangeRates.forEach((currency, rate) -> {
                        double amountDouble = rate * amount;
                        convertedAmounts.put(currency, amountDouble);
                    });

                    response.body().setExchangeRates(convertedAmounts);

                    callback.onResponse(call, Response.success(response.body()));
                } else {
                    callback.onFailure(call, new Exception("Error fetching rates"));
                }
            }

            @Override
            public void onFailure(Call<FrankFurterResponse> call, Throwable throwable) {
                callback.onFailure(call, throwable);
            }
        });
    }
}
