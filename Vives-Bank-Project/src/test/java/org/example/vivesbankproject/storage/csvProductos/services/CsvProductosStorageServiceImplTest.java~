package org.example.vivesbankproject.storage.csvProductos.services;

import org.example.vivesbankproject.cuenta.dto.tipoCuenta.TipoCuentaRequest;
import org.example.vivesbankproject.cuenta.mappers.TipoCuentaMapper;
import org.example.vivesbankproject.cuenta.models.TipoCuenta;
import org.example.vivesbankproject.cuenta.repositories.TipoCuentaRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.mock.web.MockMultipartFile;
import org.springframework.test.util.ReflectionTestUtils;

import java.io.IOException;
import java.math.BigDecimal;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.List;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class CsvProductosStorageServiceImplTest {

    @Mock
    private TipoCuentaRepository tipoCuentaRepository;

    @Mock
    private TipoCuentaMapper tipoCuentaMapper;

    @InjectMocks
    private CsvProductosStorageServiceImpl csvProductosStorageService;

    private Path tempDirectory;

    @Mock
    private TipoCuentaRepository tipoCuentaRepository;

    @Mock
    private TipoCuentaMapper tipoCuentaMapper;

    @BeforeEach
    void setUp() throws IOException {
        tempDirectory = Files.createTempDirectory("test-storage");
        csvProductosStorageService = new CsvProductosStorageServiceImpl(
                tempDirectory.toString(),
                tipoCuentaRepository,
                tipoCuentaMapper
        );
    }


    @Test
    void testConvertToTipoCuentaRequest() {
        String[] data = {"Cuenta Corriente", "3.5"};
        TipoCuentaRequest request = csvProductosStorageService.convertToTipoCuentaRequest(data);

        assertNotNull(request);
        assertEquals("Cuenta Corriente", request.getNombre());
        assertEquals(new BigDecimal("3.5"), request.getInteres());
    }

    @Test
    void testConvertToTipoCuentaRequestInvalidData() {
        assertThrows(IllegalArgumentException.class, () ->
                csvProductosStorageService.convertToTipoCuentaRequest(new String[0])
        );
    }

    @Test
    void testImportTiposCuentaFromCsv() throws Exception {
        // Prepare test CSV file
        String csvContent = "Nombre,Interes\nCuenta Corriente,3.5\nCuenta Ahorro,2.0";
        MockMultipartFile file = new MockMultipartFile(
                "file", "test.csv", "text/csv", csvContent.getBytes()
        );

        // Prepare mocked TipoCuenta
        TipoCuentaRequest request = TipoCuentaRequest.builder()
                .nombre("Cuenta Corriente")
                .interes(new BigDecimal("3.5"))
                .build();
        TipoCuenta tipoCuenta = new TipoCuenta();
        tipoCuenta.setNombre("Cuenta Corriente");
        tipoCuenta.setInteres(new BigDecimal("3.5"));

        // Mock repository and mapper
        when(tipoCuentaRepository.findByNombre(anyString())).thenReturn(Optional.empty());
        when(tipoCuentaMapper.toTipoCuenta(any(TipoCuentaRequest.class))).thenReturn(tipoCuenta);
        when(tipoCuentaRepository.saveAll(anyList())).thenAnswer(invocation -> {
            List<TipoCuenta> accounts = invocation.getArgument(0);
            return accounts;
        });

        // Perform import
        List<TipoCuenta> importedAccounts = csvProductosStorageService.importTiposCuentaFromCsv(file);

        // Assertions
        assertNotNull(importedAccounts);
        assertEquals(1, importedAccounts.size());
        assertEquals("Cuenta Corriente", importedAccounts.get(0).getNombre());
    }

    @Test
    void testInit() {
        csvProductosStorageService.init();
        assertTrue(Files.exists(tempDirectory));
    }

    @Test
    void testStoreImportedCsv() throws IOException {
        MockMultipartFile file = new MockMultipartFile(
                "file", "test.csv", "text/csv", "content".getBytes()
        );

        String storedFilename = csvProductosStorageService.storeImportedCsv(file);

        assertNotNull(storedFilename);
        assertTrue(storedFilename.startsWith("tipos_cuenta_"));
        assertTrue(storedFilename.endsWith(".csv"));
        assertTrue(Files.exists(tempDirectory.resolve(storedFilename)));
    }

    @Test
    void testDelete() throws IOException {
        String filename = "test.csv";
        Path filePath = tempDirectory.resolve(filename);
        Files.createFile(filePath);

        csvProductosStorageService.delete(filename);

        assertFalse(Files.exists(filePath));
    }
}